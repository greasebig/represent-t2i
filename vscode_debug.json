替代方案  
对于IDE提供的断点功能确实很方便，但是对于一些vim党来说就的另寻方案了。 Python 的 pdb，正是其自带的一个调试库。它为 Python 程序提供了交互式的源代码调试功能，是命令行版本的 IDE 断点调试器，完美地解决了我们刚刚讨论的这个问题。   


打开方式   



{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": false
        },
        {
            "name": "PVRCNN",
            "type": "python",
            "request": "launch",
            //要进行调试的python文件
            "program": "/data_f/sun/miniconda3/envs/openpcdet/lib/python3.8/site-packages/torch/distributed/launch.py",
            "console": "integratedTerminal",
            //修改默认采用的conda环境，注意是pythonPath，不是python
            "pythonPath":"/data_f/sun/miniconda3/envs/openpcdet/bin/python",
            //设置为false，表示会进入内置包package中代码进行调试
            "justMyCode": false,
            //相关参数python xxx.py  --xxx xxxx
            "args":[
                // "--nproc_per_node=2",
                "--nproc_per_node=1",
                "--master_addr=127.0.0.1",
                "--master_port=29500",
                "/data_f/sun/OpenPCDet/tools/train.py",
                "--launcher",
                "pytorch",
                "--cfg_file",
                "/data_f/sun/OpenPCDet/tools/cfgs/kitti_models/pv_rcnn.yaml",
            ],
            //设置采用哪几块的GPU进行训练调试
            "env": {"CUDA_VISIBLE_DEVICES":"1"},
            //修改vscode代码调试的根目录,${workspaceFolder}表示当前VSCode打开的文件夹根目录
            "cwd": "${workspaceFolder}/tools"
        },
    ]
}





怎么好像冲突后拉下来反而被改写保存不了了      



原始版本
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: Current File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": false,
            "subProcess": true,
            "stopOnEntry": false,
        }
    ]
}
这个在使用debug按钮的时候有时读不到current文件夹的模块



pip install debugpy

{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "debugpy",
            "request": "attach",
            // "program": "${file}",
            // "console": "integratedTerminal",
            "justMyCode": false,
            "subProcess": true,
            "stopOnEntry": false,
            "connect": {
                "host": "localhost", 
                "port": 50688 
            }
        }
    ]
}

python3 -m debugpy --listen 50689  --wait-for-client 

python3 -m debugpy --listen 50688 --wait-for-client 

单文件 好像还是需要 使用 --wait-for-client 

python3 -m debugpy --listen 50678  --wait-for-client 

python3 -m debugpy --listen 50678  --wait-for-client train.py

python3 -m debugpy --listen 50688  --wait-for-client webui.py

python3 -m debugpy --listen 50688  --wait-for-client webui.py --xformers

F5

listen用法和公网转发使用的命令不太一样

python3 -m debugpy --listen 50688  --wait-for-client webui.py --port 8895 --listen


这个方法好像能让我的win7进行debug     
不需要勾选服务器环境，再按debug     
直接在终端配置环境     
就是要多装一个debugpy     

缺点就是有时候会忘记按下f5，一直傻等




现在远程端口连接都好方便     
新版vscode可以自己就映射端口    
另外这个debug也可以设置端口    
